# 应用名称, 当然是越短越好, 并且一旦部署以后就不要再改, 每一个 Kubernetes 资源的名称都通过这个  appname 计算而来
appname: devpi
# registry 和 imageTag 会在 lain deploy 阶段通过 helm upgrade 的 --set 参数进行超载
# 但是你若是想要在这里手写 imageTag, 然后直接用 helm 来管理上线, 也没有问题 (注意修改 kubeconfig 就是了)
registry: registry.poc.ein.plus
imageTag: overridden-during-deploy
domain: bei.ein.plus
# 通用的环境变量写在这里
# env:
#   AUTH_TYPE: "basic"
#   BASIC_AUTH_USER: "admin"
# 集群特定的环境变量则用 lain env 命令来管理
# 事实上 lain env 做的事情就是创建出 dummy-env 这个 Kubernetes Secret,
# 由于 Kubernetes secret 不方便人手编辑, lain 为此做了明文编辑的封装
# lain use [CLUSTER]
# lain env add FOO=BAR
# lain env edit

# 这一块负责把配置文件挂载到容器里, subPath 是需要挂载的文件名称, 而 mountPath 就是你希望挂载到容器里的路径啦
# 至于要怎样让 Kubernetes 知道你需要挂载的文件, 这个建议用 lain secret 命令:
# lain use [CLUSTER]
# lain secret add secret.json
# 创建好了以后, 像这样声明一下, 就能让 Kubernetes 把你的 secret 里的文件内容映射到容器里:
# volumeMounts:
#   - mountPath: /lain/app/conf/secret.json
#     subPath: secret.json

# 如果你的应用要挂载本地目录(基本都是 jfs, 不建议你真的挂载本地目录, 否则磁盘写爆了就不开心了)
# 写法就稍微复杂写了, 需要先在 volumes 里声明 hostPath, 然后在 volumeMounts 里加一个挂载
volumes:
  - name: jfs-data
    hostPath:
      path: "/jfs/devpi/data"
      type: Directory

volumeMounts:
  - name: jfs-data
    mountPath: /data

# deployment 是一个 Kubernetes 概念, 是 Kubernetes 管理容器最为朴素的一种方式
# 只需要声明你的应用需要什么资源, 以什么命令启动, 需要暴露什么端口, 开发过 web 应用的人对下边的参数都会非常熟悉
# 并列的概念还有 statefulset, daemonset, 分别对应着两种不同的部署要求, 这个有兴趣可以细看下文档哦
deployments:
  web:
    # 应用在不同的集群可能需要设置不同的实例数(甚至不同的镜像), 这个可以在 values-[CLUSTER].yaml 里(类似)这样写, helm 会帮你自动合并变量:
    # deployments:
    #   web:
    #     replicaCount: 3
    #     imageTag: another-tag
    image: ccr.ccs.tencentyun.com/ein-enterprise/devpi:5.3.1
    replicaCount: 1
    # 如果你需要用别的用户来运行你的软件, 则在 podSecurityContext 下声明 runAsUser
    # 比如用 root:
    # podSecurityContext: {'runAsUser': 0}
    podSecurityContext: {}
    # 如果你的应用需要更长的退出时间, 则修改这个值
    terminationGracePeriodSeconds: 70
    # 关于资源分配:
    # 简而言之, limits 描述了你的应用最多能用到多少资源
    # 而 requests 则是 Kubernetes 调度的时候就会尊重的数值, 能够保证你的应用最少能用到这么多资源
    # 如果你确定你的应用大部分时间"很乖", 只有极少数时刻需要临时分配更多资源, 你可以按照经验值或者监控数据来书写资源分配
    # 如果你不熟悉你的应用的资源使用表现, 你应该先把 requests 和 limits 写成一样, 之后如果有需要优化资源占用的话, 再依靠监控数据进行调整
    # ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#how-pods-with-resource-requests-are-scheduled
    resources:
      limits:
        # ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu
        cpu: 1000m  # 1000m is equivalent to 1 CPU
        # memory 千万不要写小 m 啊, m 是一个小的要死的单位, 写上去一定会突破容器的最低内存导致无法启动, 要写 M, Mi, G, Gi 这种才好
        # ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-memory
        memory: 2.5Gi
      requests:
        cpu: 10m
        memory: 2.5Gi
    # 仅支持 exec 写法, 一定要封闭在 [] 里边, 不要写成字符串了
    command:
      - '/docker-entrypoint.sh'
      - 'devpi-server'
      - '--restrict-modify'
      - 'root'
      - '--host'
      - '0.0.0.0'
      - '--port'
      - '3141'
      - '--mirror-cache-expiry'
      - '1800'
      - '--request-timeout'
      - '1800'
      - '--outside-url'
      - 'https://pypi.in.ein.plus'
    # 描述你的容器会暴露哪个端口, 对于声明了端口的 deployment, helm template 会帮你渲染出 service
    # service 在 Kubernetes 里相当于一系列 [容器 IP]:[port] 的集合, 每一个端点都可以提供服务
    # 类似于一个 nginx upstream 里可以写好多个 server, 自己想象吧
    # 另外, 这里为了书写方便, 和照顾大多数应用的习惯, 默认应用最多只需要暴露一个 TCP 端口
    # 如果你的奇葩应用需要高级定制, 比如需要更多端口, 甚至走 UDP, 请寻求 SA 帮助
    containerPort: 3141
    # 既然声明了端口, 不妨加一下健康检查吧, 如果你的应用没有 http 健康检查接口, 写个 tcp 健康检查也行 (详见下方文档)
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request
    readinessProbe:
      httpGet:
        path: /root
        port: 3141
      initialDelaySeconds: 10
      periodSeconds: 3
      failureThreshold: 1

# ingress 是 Kubernetes 抽象出来的负责描述域名转发规则的资源
# 一个 ingress rule 描述了一个域名要转发到哪个 Kubernetes service 下边
# 但是在 values.yaml 中, 已经贴心的帮你把生成 service 的细节写到 templates/service.yaml 这个模板里了
# 如果你想更进一步了解 service 是什么, 可以参看模板里的注释, 以及相应的 Kubernetes 文档:
# https://kubernetes.io/docs/concepts/services-networking/service/#motivation

# ingresses 用来声明内网域名
ingresses:
  # 这里只需要写域名最开始的那部分就可以了, 在模板里会帮你展开成对应集群的内网域名
  - host: pypi.in.ein.plus
    # 你想把这个域名的流量打到哪个 deploy 上, 就在这里写哪个 deploy 的名称
    deployName: web
    paths:
      - /
  - host: pypi
    deployName: web
    paths:
      - /

# ingressAnnotations 里可以声明一系列配置, 会注入该应用的 nginx 配置里
# 具体可以配置的项目见 https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#annotations
# ingressAnnotations:
#   nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: 1
#   nginx.ingress.kubernetes.io/proxy-next-upstream-tries: 1

# 如果你的应用不需要外网访问, 则 ingresses 这一块留空即可, 删了也没问题啦
# 别的应用如果需要在集群内访问 dummy, 可以直接通过 dummy- 来访问
# 只要你在 deployment 里声明了 containerPort, chart 模板就会帮你创建出免费的 service, 作为集群的内部访问域名
